
/**
 * @fileoverview Template to compose HTTP reqeuest.
 * 
 */

const url = `https://api-access.pangolin-sdk-toutiao.com/api/ad/union/sdk/reward_video/reward/`;
const method = `POST`;
const headers = {
'Accept' : `*/*`,
'Accept-Encoding' : `gzip, deflate, br`,
'Connection' : `keep-alive`,
'Content-Type' : `application/json`,
'Host' : `api-access.pangolin-sdk-toutiao.com`,
'User-Agent' : `Mozilla/5.0 (iPhone; CPU iPhone OS 13_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148`,
'Accept-Language' : `zh-Hans-CN;q=1, en-US;q=0.9`
};
const body = `{"message":"2w2OGGroW0lbZ3Gs7gmdBr7lKdUX1DP9qmT23QcTezJ7xlCnJxVxfJ\/DdMirBYQPk5XKrz\/I8ZZ5J2sQUesdtYKK4B1iIUGSDsHyPID661Y1WuWhaIaZY3dFjhIg8tHHe60tJJcGMzuJ3bNQEpXjLtcdpMlOKRlGNZXS851uJ+EMhMh8+TxjJIKGgzhEhItazoN4aAYHkgYZbA328PzwQ6QXKNcnvSG0tvjkb7uGg5S4pYsG5VvJZeMlE6pqT4KPBMYIOdaV09rJIavADTOrpYQZ4Vj2INMsHbLmiBbvCHPkLv\/lEl97qcf4X7\/Y3gAIrwlE8PP2ZcT6ZUiapuWI9jFgDq5ynW77BbZViWEHr7tMkQF2Tp4egPEhT8xhzesM5nsltNkgfAq8BnRE2VmZ3in3DMH02HveMqDHMH\/z80Bb\/UbxTTvEp+yJEmWYzOEhCmvy22FEIWyY9HK+1Qu300sZi12pKMsQATPNYLpgDCaeVUqJsmjGU72ngVuh86Ha0zJ\/yPRlZhitSRoCgQYfVDS+1EIeFX3Pi7+8FC6CoaggBMZpUmGdedtp49wa1dARLR\/S2kiL\/fq1\/GmmsP53bVHUJC7D+flLl10OabLR2Er\/kvlUBNLt2r263EeIlC3MkBc\/QkNFU30Se2t\/q7f3eONbSDbA1J1W2st8EtVD79aKsRDHeR\/pI8TG+MOsMfhENurLhMzSgY6VRY7jwMpE07FcCMWWj7kPRKNx9VH85m31s8o9Z01t+f1jUBE6IWQE0\/Gbb7JRuFuL16yR07hjcBhF4Gea2rttUQRltWYjytYb6HGBPRyFOyQ4M9vQvh3tr1bsEQV4iUZDY283FacZU5F58q\/S\/ym74rDBunHFURGP1D7OJnnsQnrZsZpI1ddDJXQxX3SAaiQIqYJyDjmun\/ZRWZO6HJe29NDbcPkVso8NozPF3NLLQWpbaSxpyu9gBNErQMTg2tkvJwkBmM80tzL+XScjcKKjjAeerBkofHCc\/QOziDaD1sMudHx9kC90sSP7Ya33RnJIA7lwzv+FTAFEREZQwD4t9tIae2KJYI8PJJnDYlmzbaw5Xj56AzdV7DFrHe6fBp3ySiPDSPeIC8sFtRirpZGGoztDMfcSMooXNmDS13IEs\/kzKKWHbDoZ1jnZFNXOf\/bZxJDSMogcOMD6z\/FfM9rSizAOzf7Ikb6IBG4KlzndPGKYIuEdjFY8tUuRmwU8XfzcD4068mG70XOom0VYLryAkdPQfNW1JKi\/fOST4GjmeqdpFvd0y1m3zVbznzh96oWanYofNut+xwgSpr0ukUuhxHiLuZXhpRvVIdsO6qOYHiwOib0u2H2\/nQCtjTDxPAOt0saJOE7Nn5y6wFCNlCmV44sbFdxzQJxvnmmGLKp+G4LTzpQ0\/lfwiiBpdEbvbWRK6\/o7182JXQqPIFuZ3eh\/ZGzK19azgBmxjvRRabDp90MOmj9KRGGZP60jKc+aUPU+UBoRYki098NAuWsPI9lZAP2xy9WE+7RKAMVxTpIVUVOptJ6l\/8s+Zvv+WcqTil7B6dsG6a45kfGqTfad+zz\/ZQWHSsb6JlNznulyAwVLElDUeHM1izquP8\/EfRbCk3gCTaaOyEUpnDb1CzikZPRJo7RR8pgAuqyImfaocDRzEfusSZrvDpFt8ZPf30cA+DiQTQtsDsl9b3\/xL5Nnx7P\/9jy0NzcFV6Doq3lHbz+o4lrT3gv7ftZQLgSxwe6tbKK3i2LaGsgF1LEApxJoq2cVYoFo4X4\/MeCt7+6cY83OO+W7VX1npGh8mv+0tuD3g2w7xctnW62dh+k30shLYkkbHi6t1UuAN6sBf8rejMun4RTRGCA5hckdGNqZzPFwpst2tJD20boOaQu6CqiwCOnqceEtQov5T86WA77pdneXXitUMUsWf+1Zz6\/gWk32txpUiMNpaMFDfGFO9S8P9z6EJgfq9SG6tj4uCWBnzBQoztqaqM7ATYrdvaBuugw6hz60MgqR8WTqqDufuswAUrz3qZg1bJ9sAs93EU5Xh3VE7PsrAOs4y70ml2hdhcoRIYroZU6u2bqUv\/ABvGx7W4geEXZapKBESrxq5O3ZJFfR\/itnk8UfSWq4rXCAX991ofqzbZDl+CEdmmducMciyS41r8Cl6JoCKlFdPHwz4d\/SSxJgj3V\/J26ajRZrRyqUbkFt3O1HQccO23GAO7aZox034Pituf5DXJLDkrnHhAHPP6LOBjX7AlIE3VEX\/DyPbciUBORdrg\/lDA14uPeV2QUMoxyd41IOjvjRb0ufBV6M5hayFT3KRXcpUWX8QW7eDDbm2rLzzcJAFILCEhilUp9WgMzFl+dJhA+8ftVGa+Dm7tSv0L71h6QIynnlkqySTTRP+ZhTSAXBIQeP1K3vTeDqsxos0W5WquaPB1b3khTH31hVQOY\/XhYEJAw8cEr\/pToqONTxja3OvChQXixSXdsMH8hj\/ICYlXc87srlhVnFx5zHGHPflscediGK6\/V8EzomrGvAIyT+RKwOnXKsEi+4M1Q66WZ1N3w6mSIW8NOGcO8s2rLwn71qQ8OWj3UUWKaa7NezZqL7hHuhiabYdf34vq\/M4pB1MYYoGOmbS2aaVzv6g\/Yf4YRBRHjq6JLui7pqUV9mz1mbRUqszm0nNKf375LjCCO8dGVZ0li9dDxubZHWYVJ+\/TKVAQ\/rGmw2XUkFjIHVz\/okbNrEhL\/qYvl7cC8\/u3a4qOIqFYbRT74FZkU1a1aM8BzpwZ4Z2rUfO9sjTvkUMVjZ6CDK4au4Xm6SVckkmVSpVzFzMModpCg2hI0Z7h6TBFQVxG27MMtX7H4u5OilGn3rUeYRYj7bGJBXpHaF8UKidpi527wqVokS02U+2r1I\/Mbb7D8jpTdhyJBDkeK8uhp6a2G9xvEWOJVGVQbXVuCmcNvDOqPPhRxddWDEZxZ7CKj1fxLWUiMTvsNA5k0y9L+3YdlB5ds10UoNw3chNYpOxdfc58LT6WrhDSjOApB5\/7u\/Wd5A5TNeSt7ntRAVR3Q7K2256sgRfkW9\/SLX3SwslQ2bRQV2e8rKjK9CbREImZpIpj9TOf0TMsghfUZMwl71VXu0xzzLgT\/HcdbkEwhyrFEoBiKNoSU7p3\/CwdgvY+K1\/LJPCFfDakTWf1XrkAzap9fjxgdGFaNtfqJ3thsUW6xLKsctZognCrQvMmxFiniWM+Fs7tPkxrcYJVhhU5D\/1YanVvpepD7tsdScaYSzsvXd7us6g9zgJJeZP1KlUikApnnbENuJcOLSxiQAx3BEPqqudJki6w7PWPBud5317dRPn+fWS9+kepll9ZBfgmiK3P0gm1YL+HNNm\/SwDHYqKUMfpV1VPp09Fv\/I\/KcXJjge2Uv4eWl21U0jNMjFfoCCown+ngGAfmTQOT4v3d1u2NINpNzlEt4QW6Oxtq3LF1va\/Q1rVe97j5Xrc2bmnfNEnYvL+sD3DXg\/KE5R\/Q95u\/ksCsFO2N4hSwE8BCTsPTirHsYEluAb5MVo3Kx8vI\/tstd9cfK1sGTQ6IEdoTUCEWNHc1b6aJX6wqflTAEPJcT3Kqngu+UI0U7HC8XyQKEGbHQTVAc+qQs6CLJxWTcKoM\/ZTedKPX8Suz1C3JW6vAeuJIjJozyiIIJ0GqXvvh2Hz1kQ0rXZu796xlCNFoyxHDGOJNi2D21BaZTGtrjuZOte4afkhXzs2ZTS7HJKHccHHfGkgb7vg\/UesDp8ixlrj7WG4d9fVdAc25AzlYn5ouKHtWHzR8o9UlJ7cId6OKOs+ouL7YYdIdoKjZtlpN6VREsBcGzq7mvgVW3DfZUNIXSG5Sht8xXKkNsgwHMajDaTcPwV1wyKNP9ZXcw6AFzNA3DO5alCfn5tHoSAZmAMJlO2If3XgPsBzKKkSruRvgdUTFB864ze4m8WdNzGWzyvkloPfL712s46wWmc4gBuBe5oAMyQqNGFfxwbNRdftg8a5pUd8LG23aPXKIAd0t5bLLnCXgCAkch+FNrvl2hateL6oIGjiISPul8u6kGwTi+eqPSfsAVvEEwZNrRXXwq9kiM5R9ulVD8qE\/nDHKOQBOaDH9afxgacE9qwLcXMGW8rCkdxQBUCvCW6DPAtzKoQNHCfqebhllXD\/X4Ar1RvcUpSeWa43q3mNH7G8tIBTLj3OMjEo6utKjJgQ69ZP3tTxPRdx5q6\/S9QtbIL\/M1PckKvFtfzTO1JQ5nocApdL\/mLx9KOYLHdYol8OzvsdEwpq+FahwuDPSKyrApurPZYWQ7UNZwAeDM0foggNpT5UaB6NujFswnwdpwp7W27KwNRAEauOx0vqChsjCoNy1ZGcpIC0zBc1qcJLqIplH5rT2g03awcqzZFoWOHgh2DoI0PKxdmq57CKzwrlxXUd53XH6uqpQ+tLcd43Om+IvEC8owweDFYUvvO75U3FX09qYp9zXqLIli6s7Pmf3vxL4UQ+gxOcsv7Bd1E0pBQheTYoSuqGxiWLok17uJi+ME78ZWp0TQgyjRecKP\/Ruw\/ugz14DQ4YxXy2ua+26LuYcS\/6SdiigXx9Q\/dQYHOutcVhziT5WIUZheRRFXOriXeR9Er6Ky5HZVpnl4CY8+Z2cM5+tqVm1XH4FCuzo4gbBo+lhlevraohJKJP0faFzwC2WI8qn0yw0ZoVWh7YbTa3CGTp8Hmt1LnaR\/Ruoud2R01dsm0WNHO+FxWrQnMfWFt\/IdPhLAGAxbGnDnDZ5BGsB7rD+3d5lq82zCqPZyiRuqYfO5KnFXhLzdDRgS+CS3NapCJ7YkTGMDOOjGu7lOHBzWCWkAehoaBtMncc\/7bqriVlE69LH1VSma9mxmcZTdl1D\/H7SYxd6AJtjOztktU5Ruzix4qq6FtBeoFzOytGBag6kNCJGTfyzgKXXJHT1nsolUSWU1WgmJBCDmKDbc6taVFuP4MhWtMIyUSGYPGXQfkJXxxK2kLPbYkkyd1eAbXV3oAjLU5D1PGO85QMwxmSKhqp2c4kwnL5DZ6JNiHBDiXYhGtm510uwU+Z2Ox2SoDlgVzPumOYOoTLglM4Bj4XqBi\/G8Ifz4LOhRv7f5O5rJufRJRrhwWwsBnCvlulG9TTCxn9XngMD2Eec3l0WtOIoFXUcHc3WHRFSOQcKRnFs64YOjof8M8I6cAR1G9FE6N9kblHecxVzmlzPDpUTuvcGtuPNMej3PpAdcFYQT\/bYX9jY1zUywCiCNQ0XSgdNs7NuzjkveIFmvlbLQF7QdVNUel\/9tsYCWndGmJNbayl0EGnGYh1KzoTRAba4pba4a+L1\/IWhThYf4RRGsaLdI63aIFL9rcQr2rsT2ruzG21YXRw2ir4OLPLCLxcmJFvypoW86NJ8ZXZRUfZFGdTdVWazFxvTgaAtF\/tHyFJbFdCvYl+VUi5CCJKOFOPS3WC1yNop2FYfHee2+D1LPTbsjhKiEs6FD\/bnFp6ZPFiQ+RE\/zwu","cypher":2}`;

const myRequest = {
    url: url,
    method: method,
    headers: headers,
    body: body
};

$task.fetch(myRequest).then(response => {
    console.log(response.statusCode + "\n\n" + response.body);
    $done();
}, reason => {
    console.log(reason.error);
    $done();
});
